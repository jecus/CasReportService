//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LTRReports.Datasets {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("DirectiveListReportDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DirectiveListReportDataSet : System.Data.DataSet {
        
        private BaseDetailTableDataTable tableBaseDetailTable;
        
        private ItemsTableDataTable tableItemsTable;
        
        private OperatorTableDataTable tableOperatorTable;
        
        private AdditionalDataTAbleDataTable tableAdditionalDataTAble;
        
        private System.Data.DataRelation relationOperatorTable_BaseDetailTable;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DirectiveListReportDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DirectiveListReportDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["BaseDetailTable"] != null)) {
                    base.Tables.Add(new BaseDetailTableDataTable(ds.Tables["BaseDetailTable"]));
                }
                if ((ds.Tables["ItemsTable"] != null)) {
                    base.Tables.Add(new ItemsTableDataTable(ds.Tables["ItemsTable"]));
                }
                if ((ds.Tables["OperatorTable"] != null)) {
                    base.Tables.Add(new OperatorTableDataTable(ds.Tables["OperatorTable"]));
                }
                if ((ds.Tables["AdditionalDataTAble"] != null)) {
                    base.Tables.Add(new AdditionalDataTAbleDataTable(ds.Tables["AdditionalDataTAble"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BaseDetailTableDataTable BaseDetailTable {
            get {
                return this.tableBaseDetailTable;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ItemsTableDataTable ItemsTable {
            get {
                return this.tableItemsTable;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OperatorTableDataTable OperatorTable {
            get {
                return this.tableOperatorTable;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AdditionalDataTAbleDataTable AdditionalDataTAble {
            get {
                return this.tableAdditionalDataTAble;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            DirectiveListReportDataSet cln = ((DirectiveListReportDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["BaseDetailTable"] != null)) {
                    base.Tables.Add(new BaseDetailTableDataTable(ds.Tables["BaseDetailTable"]));
                }
                if ((ds.Tables["ItemsTable"] != null)) {
                    base.Tables.Add(new ItemsTableDataTable(ds.Tables["ItemsTable"]));
                }
                if ((ds.Tables["OperatorTable"] != null)) {
                    base.Tables.Add(new OperatorTableDataTable(ds.Tables["OperatorTable"]));
                }
                if ((ds.Tables["AdditionalDataTAble"] != null)) {
                    base.Tables.Add(new AdditionalDataTAbleDataTable(ds.Tables["AdditionalDataTAble"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableBaseDetailTable = ((BaseDetailTableDataTable)(base.Tables["BaseDetailTable"]));
            if ((initTable == true)) {
                if ((this.tableBaseDetailTable != null)) {
                    this.tableBaseDetailTable.InitVars();
                }
            }
            this.tableItemsTable = ((ItemsTableDataTable)(base.Tables["ItemsTable"]));
            if ((initTable == true)) {
                if ((this.tableItemsTable != null)) {
                    this.tableItemsTable.InitVars();
                }
            }
            this.tableOperatorTable = ((OperatorTableDataTable)(base.Tables["OperatorTable"]));
            if ((initTable == true)) {
                if ((this.tableOperatorTable != null)) {
                    this.tableOperatorTable.InitVars();
                }
            }
            this.tableAdditionalDataTAble = ((AdditionalDataTAbleDataTable)(base.Tables["AdditionalDataTAble"]));
            if ((initTable == true)) {
                if ((this.tableAdditionalDataTAble != null)) {
                    this.tableAdditionalDataTAble.InitVars();
                }
            }
            this.relationOperatorTable_BaseDetailTable = this.Relations["OperatorTable_BaseDetailTable"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DirectiveListReportDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DirectiveListReportDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableBaseDetailTable = new BaseDetailTableDataTable();
            base.Tables.Add(this.tableBaseDetailTable);
            this.tableItemsTable = new ItemsTableDataTable();
            base.Tables.Add(this.tableItemsTable);
            this.tableOperatorTable = new OperatorTableDataTable();
            base.Tables.Add(this.tableOperatorTable);
            this.tableAdditionalDataTAble = new AdditionalDataTAbleDataTable();
            base.Tables.Add(this.tableAdditionalDataTAble);
            this.relationOperatorTable_BaseDetailTable = new System.Data.DataRelation("OperatorTable_BaseDetailTable", new System.Data.DataColumn[] {
                        this.tableOperatorTable.OperatorIDColumn}, new System.Data.DataColumn[] {
                        this.tableBaseDetailTable.OperatorIDColumn}, false);
            this.Relations.Add(this.relationOperatorTable_BaseDetailTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBaseDetailTable() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeItemsTable() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOperatorTable() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAdditionalDataTAble() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            DirectiveListReportDataSet ds = new DirectiveListReportDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void BaseDetailTableRowChangeEventHandler(object sender, BaseDetailTableRowChangeEvent e);
        
        public delegate void ItemsTableRowChangeEventHandler(object sender, ItemsTableRowChangeEvent e);
        
        public delegate void OperatorTableRowChangeEventHandler(object sender, OperatorTableRowChangeEvent e);
        
        public delegate void AdditionalDataTAbleRowChangeEventHandler(object sender, AdditionalDataTAbleRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BaseDetailTableDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnOperatorID;
            
            private System.Data.DataColumn columnBaseDetailID;
            
            private System.Data.DataColumn columnSerialNumber;
            
            private System.Data.DataColumn columnManufactureDate;
            
            private System.Data.DataColumn columnModel;
            
            private System.Data.DataColumn columnLifelengthSinceNewHours;
            
            private System.Data.DataColumn columnLifelengthSinceNewCycles;
            
            private System.Data.DataColumn columnAircraftRegistrationNumber;
            
            private System.Data.DataColumn columnAircraftLineNumber;
            
            private System.Data.DataColumn columnAircraftVariableNumber;
            
            private System.Data.DataColumn columnAircraftLineNumberCaption;
            
            private System.Data.DataColumn columnAircraftVariableNUmberCaption;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseDetailTableDataTable() {
                this.TableName = "BaseDetailTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BaseDetailTableDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BaseDetailTableDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OperatorIDColumn {
                get {
                    return this.columnOperatorID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BaseDetailIDColumn {
                get {
                    return this.columnBaseDetailID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SerialNumberColumn {
                get {
                    return this.columnSerialNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ManufactureDateColumn {
                get {
                    return this.columnManufactureDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ModelColumn {
                get {
                    return this.columnModel;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LifelengthSinceNewHoursColumn {
                get {
                    return this.columnLifelengthSinceNewHours;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LifelengthSinceNewCyclesColumn {
                get {
                    return this.columnLifelengthSinceNewCycles;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AircraftRegistrationNumberColumn {
                get {
                    return this.columnAircraftRegistrationNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AircraftLineNumberColumn {
                get {
                    return this.columnAircraftLineNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AircraftVariableNumberColumn {
                get {
                    return this.columnAircraftVariableNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AircraftLineNumberCaptionColumn {
                get {
                    return this.columnAircraftLineNumberCaption;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AircraftVariableNUmberCaptionColumn {
                get {
                    return this.columnAircraftVariableNUmberCaption;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseDetailTableRow this[int index] {
                get {
                    return ((BaseDetailTableRow)(this.Rows[index]));
                }
            }
            
            public event BaseDetailTableRowChangeEventHandler BaseDetailTableRowChanging;
            
            public event BaseDetailTableRowChangeEventHandler BaseDetailTableRowChanged;
            
            public event BaseDetailTableRowChangeEventHandler BaseDetailTableRowDeleting;
            
            public event BaseDetailTableRowChangeEventHandler BaseDetailTableRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBaseDetailTableRow(BaseDetailTableRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseDetailTableRow AddBaseDetailTableRow(OperatorTableRow parentOperatorTableRowByOperatorTable_BaseDetailTable, int BaseDetailID, string SerialNumber, string ManufactureDate, string Model, string LifelengthSinceNewHours, string LifelengthSinceNewCycles, string AircraftRegistrationNumber, string AircraftLineNumber, string AircraftVariableNumber, string AircraftLineNumberCaption, string AircraftVariableNUmberCaption) {
                BaseDetailTableRow rowBaseDetailTableRow = ((BaseDetailTableRow)(this.NewRow()));
                rowBaseDetailTableRow.ItemArray = new object[] {
                        parentOperatorTableRowByOperatorTable_BaseDetailTable[0],
                        BaseDetailID,
                        SerialNumber,
                        ManufactureDate,
                        Model,
                        LifelengthSinceNewHours,
                        LifelengthSinceNewCycles,
                        AircraftRegistrationNumber,
                        AircraftLineNumber,
                        AircraftVariableNumber,
                        AircraftLineNumberCaption,
                        AircraftVariableNUmberCaption};
                this.Rows.Add(rowBaseDetailTableRow);
                return rowBaseDetailTableRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseDetailTableRow FindByBaseDetailID(int BaseDetailID) {
                return ((BaseDetailTableRow)(this.Rows.Find(new object[] {
                            BaseDetailID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                BaseDetailTableDataTable cln = ((BaseDetailTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new BaseDetailTableDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnOperatorID = base.Columns["OperatorID"];
                this.columnBaseDetailID = base.Columns["BaseDetailID"];
                this.columnSerialNumber = base.Columns["SerialNumber"];
                this.columnManufactureDate = base.Columns["ManufactureDate"];
                this.columnModel = base.Columns["Model"];
                this.columnLifelengthSinceNewHours = base.Columns["LifelengthSinceNewHours"];
                this.columnLifelengthSinceNewCycles = base.Columns["LifelengthSinceNewCycles"];
                this.columnAircraftRegistrationNumber = base.Columns["AircraftRegistrationNumber"];
                this.columnAircraftLineNumber = base.Columns["AircraftLineNumber"];
                this.columnAircraftVariableNumber = base.Columns["AircraftVariableNumber"];
                this.columnAircraftLineNumberCaption = base.Columns["AircraftLineNumberCaption"];
                this.columnAircraftVariableNUmberCaption = base.Columns["AircraftVariableNUmberCaption"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnOperatorID = new System.Data.DataColumn("OperatorID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOperatorID);
                this.columnBaseDetailID = new System.Data.DataColumn("BaseDetailID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseDetailID);
                this.columnSerialNumber = new System.Data.DataColumn("SerialNumber", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSerialNumber);
                this.columnManufactureDate = new System.Data.DataColumn("ManufactureDate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnManufactureDate);
                this.columnModel = new System.Data.DataColumn("Model", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnModel);
                this.columnLifelengthSinceNewHours = new System.Data.DataColumn("LifelengthSinceNewHours", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLifelengthSinceNewHours);
                this.columnLifelengthSinceNewCycles = new System.Data.DataColumn("LifelengthSinceNewCycles", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLifelengthSinceNewCycles);
                this.columnAircraftRegistrationNumber = new System.Data.DataColumn("AircraftRegistrationNumber", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAircraftRegistrationNumber);
                this.columnAircraftLineNumber = new System.Data.DataColumn("AircraftLineNumber", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAircraftLineNumber);
                this.columnAircraftVariableNumber = new System.Data.DataColumn("AircraftVariableNumber", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAircraftVariableNumber);
                this.columnAircraftLineNumberCaption = new System.Data.DataColumn("AircraftLineNumberCaption", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAircraftLineNumberCaption);
                this.columnAircraftVariableNUmberCaption = new System.Data.DataColumn("AircraftVariableNUmberCaption", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAircraftVariableNUmberCaption);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnBaseDetailID}, true));
                this.columnBaseDetailID.AllowDBNull = false;
                this.columnBaseDetailID.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseDetailTableRow NewBaseDetailTableRow() {
                return ((BaseDetailTableRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new BaseDetailTableRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(BaseDetailTableRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BaseDetailTableRowChanged != null)) {
                    this.BaseDetailTableRowChanged(this, new BaseDetailTableRowChangeEvent(((BaseDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BaseDetailTableRowChanging != null)) {
                    this.BaseDetailTableRowChanging(this, new BaseDetailTableRowChangeEvent(((BaseDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BaseDetailTableRowDeleted != null)) {
                    this.BaseDetailTableRowDeleted(this, new BaseDetailTableRowChangeEvent(((BaseDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BaseDetailTableRowDeleting != null)) {
                    this.BaseDetailTableRowDeleting(this, new BaseDetailTableRowChangeEvent(((BaseDetailTableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBaseDetailTableRow(BaseDetailTableRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DirectiveListReportDataSet ds = new DirectiveListReportDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BaseDetailTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ItemsTableDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnItemID;
            
            private System.Data.DataColumn columnApplicability;
            
            private System.Data.DataColumn columnRemarks;
            
            private System.Data.DataColumn columnDescription;
            
            private System.Data.DataColumn columnTitle;
            
            private System.Data.DataColumn columnReferences;
            
            private System.Data.DataColumn columnStatus;
            
            private System.Data.DataColumn columnEffectivityDate;
            
            private System.Data.DataColumn columnThresholdSinceNew;
            
            private System.Data.DataColumn columnThresholdSinceEffectivityDate;
            
            private System.Data.DataColumn columnRepeatIntervals;
            
            private System.Data.DataColumn columnComplianceLifelength;
            
            private System.Data.DataColumn columnComplianceDate;
            
            private System.Data.DataColumn columnNextLifelength;
            
            private System.Data.DataColumn columnNextDate;
            
            private System.Data.DataColumn columnRemains;
            
            private System.Data.DataColumn columnCondition;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemsTableDataTable() {
                this.TableName = "ItemsTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ItemsTableDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ItemsTableDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ItemIDColumn {
                get {
                    return this.columnItemID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ApplicabilityColumn {
                get {
                    return this.columnApplicability;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RemarksColumn {
                get {
                    return this.columnRemarks;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ReferencesColumn {
                get {
                    return this.columnReferences;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EffectivityDateColumn {
                get {
                    return this.columnEffectivityDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ThresholdSinceNewColumn {
                get {
                    return this.columnThresholdSinceNew;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ThresholdSinceEffectivityDateColumn {
                get {
                    return this.columnThresholdSinceEffectivityDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RepeatIntervalsColumn {
                get {
                    return this.columnRepeatIntervals;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ComplianceLifelengthColumn {
                get {
                    return this.columnComplianceLifelength;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ComplianceDateColumn {
                get {
                    return this.columnComplianceDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NextLifelengthColumn {
                get {
                    return this.columnNextLifelength;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NextDateColumn {
                get {
                    return this.columnNextDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RemainsColumn {
                get {
                    return this.columnRemains;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ConditionColumn {
                get {
                    return this.columnCondition;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemsTableRow this[int index] {
                get {
                    return ((ItemsTableRow)(this.Rows[index]));
                }
            }
            
            public event ItemsTableRowChangeEventHandler ItemsTableRowChanging;
            
            public event ItemsTableRowChangeEventHandler ItemsTableRowChanged;
            
            public event ItemsTableRowChangeEventHandler ItemsTableRowDeleting;
            
            public event ItemsTableRowChangeEventHandler ItemsTableRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddItemsTableRow(ItemsTableRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemsTableRow AddItemsTableRow(
                        int ItemID, 
                        string Applicability, 
                        string Remarks, 
                        string Description, 
                        string Title, 
                        string References, 
                        string Status, 
                        string EffectivityDate, 
                        string ThresholdSinceNew, 
                        string ThresholdSinceEffectivityDate, 
                        string RepeatIntervals, 
                        string ComplianceLifelength, 
                        string ComplianceDate, 
                        string NextLifelength, 
                        string NextDate, 
                        string Remains, 
                        string Condition) {
                ItemsTableRow rowItemsTableRow = ((ItemsTableRow)(this.NewRow()));
                rowItemsTableRow.ItemArray = new object[] {
                        ItemID,
                        Applicability,
                        Remarks,
                        Description,
                        Title,
                        References,
                        Status,
                        EffectivityDate,
                        ThresholdSinceNew,
                        ThresholdSinceEffectivityDate,
                        RepeatIntervals,
                        ComplianceLifelength,
                        ComplianceDate,
                        NextLifelength,
                        NextDate,
                        Remains,
                        Condition};
                this.Rows.Add(rowItemsTableRow);
                return rowItemsTableRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemsTableRow FindByItemID(int ItemID) {
                return ((ItemsTableRow)(this.Rows.Find(new object[] {
                            ItemID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ItemsTableDataTable cln = ((ItemsTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ItemsTableDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnItemID = base.Columns["ItemID"];
                this.columnApplicability = base.Columns["Applicability"];
                this.columnRemarks = base.Columns["Remarks"];
                this.columnDescription = base.Columns["Description"];
                this.columnTitle = base.Columns["Title"];
                this.columnReferences = base.Columns["References"];
                this.columnStatus = base.Columns["Status"];
                this.columnEffectivityDate = base.Columns["EffectivityDate"];
                this.columnThresholdSinceNew = base.Columns["ThresholdSinceNew"];
                this.columnThresholdSinceEffectivityDate = base.Columns["ThresholdSinceEffectivityDate"];
                this.columnRepeatIntervals = base.Columns["RepeatIntervals"];
                this.columnComplianceLifelength = base.Columns["ComplianceLifelength"];
                this.columnComplianceDate = base.Columns["ComplianceDate"];
                this.columnNextLifelength = base.Columns["NextLifelength"];
                this.columnNextDate = base.Columns["NextDate"];
                this.columnRemains = base.Columns["Remains"];
                this.columnCondition = base.Columns["Condition"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnItemID = new System.Data.DataColumn("ItemID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemID);
                this.columnApplicability = new System.Data.DataColumn("Applicability", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnApplicability);
                this.columnRemarks = new System.Data.DataColumn("Remarks", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemarks);
                this.columnDescription = new System.Data.DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnTitle = new System.Data.DataColumn("Title", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTitle);
                this.columnReferences = new System.Data.DataColumn("References", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnReferences);
                this.columnStatus = new System.Data.DataColumn("Status", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnEffectivityDate = new System.Data.DataColumn("EffectivityDate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEffectivityDate);
                this.columnThresholdSinceNew = new System.Data.DataColumn("ThresholdSinceNew", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnThresholdSinceNew);
                this.columnThresholdSinceEffectivityDate = new System.Data.DataColumn("ThresholdSinceEffectivityDate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnThresholdSinceEffectivityDate);
                this.columnRepeatIntervals = new System.Data.DataColumn("RepeatIntervals", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRepeatIntervals);
                this.columnComplianceLifelength = new System.Data.DataColumn("ComplianceLifelength", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnComplianceLifelength);
                this.columnComplianceDate = new System.Data.DataColumn("ComplianceDate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnComplianceDate);
                this.columnNextLifelength = new System.Data.DataColumn("NextLifelength", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNextLifelength);
                this.columnNextDate = new System.Data.DataColumn("NextDate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNextDate);
                this.columnRemains = new System.Data.DataColumn("Remains", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemains);
                this.columnCondition = new System.Data.DataColumn("Condition", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCondition);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnItemID}, true));
                this.columnItemID.AllowDBNull = false;
                this.columnItemID.Unique = true;
                this.columnApplicability.DefaultValue = ((string)("-"));
                this.columnRemarks.DefaultValue = ((string)("-"));
                this.columnDescription.DefaultValue = ((string)("-"));
                this.columnTitle.DefaultValue = ((string)("-"));
                this.columnReferences.DefaultValue = ((string)("-"));
                this.columnStatus.DefaultValue = ((string)("-"));
                this.columnEffectivityDate.DefaultValue = ((string)("-"));
                this.columnThresholdSinceNew.DefaultValue = ((string)("-"));
                this.columnThresholdSinceEffectivityDate.DefaultValue = ((string)("-"));
                this.columnRepeatIntervals.DefaultValue = ((string)("-"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemsTableRow NewItemsTableRow() {
                return ((ItemsTableRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ItemsTableRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ItemsTableRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ItemsTableRowChanged != null)) {
                    this.ItemsTableRowChanged(this, new ItemsTableRowChangeEvent(((ItemsTableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ItemsTableRowChanging != null)) {
                    this.ItemsTableRowChanging(this, new ItemsTableRowChangeEvent(((ItemsTableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ItemsTableRowDeleted != null)) {
                    this.ItemsTableRowDeleted(this, new ItemsTableRowChangeEvent(((ItemsTableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ItemsTableRowDeleting != null)) {
                    this.ItemsTableRowDeleting(this, new ItemsTableRowChangeEvent(((ItemsTableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveItemsTableRow(ItemsTableRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DirectiveListReportDataSet ds = new DirectiveListReportDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ItemsTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OperatorTableDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnOperatorID;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnLogotype;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperatorTableDataTable() {
                this.TableName = "OperatorTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OperatorTableDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OperatorTableDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OperatorIDColumn {
                get {
                    return this.columnOperatorID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LogotypeColumn {
                get {
                    return this.columnLogotype;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperatorTableRow this[int index] {
                get {
                    return ((OperatorTableRow)(this.Rows[index]));
                }
            }
            
            public event OperatorTableRowChangeEventHandler OperatorTableRowChanging;
            
            public event OperatorTableRowChangeEventHandler OperatorTableRowChanged;
            
            public event OperatorTableRowChangeEventHandler OperatorTableRowDeleting;
            
            public event OperatorTableRowChangeEventHandler OperatorTableRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOperatorTableRow(OperatorTableRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperatorTableRow AddOperatorTableRow(int OperatorID, string Name, byte[] Logotype) {
                OperatorTableRow rowOperatorTableRow = ((OperatorTableRow)(this.NewRow()));
                rowOperatorTableRow.ItemArray = new object[] {
                        OperatorID,
                        Name,
                        Logotype};
                this.Rows.Add(rowOperatorTableRow);
                return rowOperatorTableRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperatorTableRow FindByOperatorID(int OperatorID) {
                return ((OperatorTableRow)(this.Rows.Find(new object[] {
                            OperatorID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                OperatorTableDataTable cln = ((OperatorTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new OperatorTableDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnOperatorID = base.Columns["OperatorID"];
                this.columnName = base.Columns["Name"];
                this.columnLogotype = base.Columns["Logotype"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnOperatorID = new System.Data.DataColumn("OperatorID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOperatorID);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnLogotype = new System.Data.DataColumn("Logotype", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogotype);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnOperatorID}, true));
                this.columnOperatorID.AllowDBNull = false;
                this.columnOperatorID.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperatorTableRow NewOperatorTableRow() {
                return ((OperatorTableRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new OperatorTableRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(OperatorTableRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OperatorTableRowChanged != null)) {
                    this.OperatorTableRowChanged(this, new OperatorTableRowChangeEvent(((OperatorTableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OperatorTableRowChanging != null)) {
                    this.OperatorTableRowChanging(this, new OperatorTableRowChangeEvent(((OperatorTableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OperatorTableRowDeleted != null)) {
                    this.OperatorTableRowDeleted(this, new OperatorTableRowChangeEvent(((OperatorTableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OperatorTableRowDeleting != null)) {
                    this.OperatorTableRowDeleting(this, new OperatorTableRowChangeEvent(((OperatorTableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOperatorTableRow(OperatorTableRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DirectiveListReportDataSet ds = new DirectiveListReportDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OperatorTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AdditionalDataTAbleDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnReportHeadertText;
            
            private System.Data.DataColumn columnDateAsOf;
            
            private System.Data.DataColumn columnModelText;
            
            private System.Data.DataColumn columnReportFooter;
            
            private System.Data.DataColumn columnReportFooterPrepared;
            
            private System.Data.DataColumn columnWebSite;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdditionalDataTAbleDataTable() {
                this.TableName = "AdditionalDataTAble";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AdditionalDataTAbleDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AdditionalDataTAbleDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ReportHeadertTextColumn {
                get {
                    return this.columnReportHeadertText;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateAsOfColumn {
                get {
                    return this.columnDateAsOf;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ModelTextColumn {
                get {
                    return this.columnModelText;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ReportFooterColumn {
                get {
                    return this.columnReportFooter;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ReportFooterPreparedColumn {
                get {
                    return this.columnReportFooterPrepared;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn WebSiteColumn {
                get {
                    return this.columnWebSite;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdditionalDataTAbleRow this[int index] {
                get {
                    return ((AdditionalDataTAbleRow)(this.Rows[index]));
                }
            }
            
            public event AdditionalDataTAbleRowChangeEventHandler AdditionalDataTAbleRowChanging;
            
            public event AdditionalDataTAbleRowChangeEventHandler AdditionalDataTAbleRowChanged;
            
            public event AdditionalDataTAbleRowChangeEventHandler AdditionalDataTAbleRowDeleting;
            
            public event AdditionalDataTAbleRowChangeEventHandler AdditionalDataTAbleRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAdditionalDataTAbleRow(AdditionalDataTAbleRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdditionalDataTAbleRow AddAdditionalDataTAbleRow(int ID, string ReportHeadertText, string DateAsOf, string ModelText, string ReportFooter, string ReportFooterPrepared, string WebSite) {
                AdditionalDataTAbleRow rowAdditionalDataTAbleRow = ((AdditionalDataTAbleRow)(this.NewRow()));
                rowAdditionalDataTAbleRow.ItemArray = new object[] {
                        ID,
                        ReportHeadertText,
                        DateAsOf,
                        ModelText,
                        ReportFooter,
                        ReportFooterPrepared,
                        WebSite};
                this.Rows.Add(rowAdditionalDataTAbleRow);
                return rowAdditionalDataTAbleRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdditionalDataTAbleRow FindByID(int ID) {
                return ((AdditionalDataTAbleRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                AdditionalDataTAbleDataTable cln = ((AdditionalDataTAbleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new AdditionalDataTAbleDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnReportHeadertText = base.Columns["ReportHeadertText"];
                this.columnDateAsOf = base.Columns["DateAsOf"];
                this.columnModelText = base.Columns["ModelText"];
                this.columnReportFooter = base.Columns["ReportFooter"];
                this.columnReportFooterPrepared = base.Columns["ReportFooterPrepared"];
                this.columnWebSite = base.Columns["WebSite"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnReportHeadertText = new System.Data.DataColumn("ReportHeadertText", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnReportHeadertText);
                this.columnDateAsOf = new System.Data.DataColumn("DateAsOf", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateAsOf);
                this.columnModelText = new System.Data.DataColumn("ModelText", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnModelText);
                this.columnReportFooter = new System.Data.DataColumn("ReportFooter", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnReportFooter);
                this.columnReportFooterPrepared = new System.Data.DataColumn("ReportFooterPrepared", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnReportFooterPrepared);
                this.columnWebSite = new System.Data.DataColumn("WebSite", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebSite);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdditionalDataTAbleRow NewAdditionalDataTAbleRow() {
                return ((AdditionalDataTAbleRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new AdditionalDataTAbleRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(AdditionalDataTAbleRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AdditionalDataTAbleRowChanged != null)) {
                    this.AdditionalDataTAbleRowChanged(this, new AdditionalDataTAbleRowChangeEvent(((AdditionalDataTAbleRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AdditionalDataTAbleRowChanging != null)) {
                    this.AdditionalDataTAbleRowChanging(this, new AdditionalDataTAbleRowChangeEvent(((AdditionalDataTAbleRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AdditionalDataTAbleRowDeleted != null)) {
                    this.AdditionalDataTAbleRowDeleted(this, new AdditionalDataTAbleRowChangeEvent(((AdditionalDataTAbleRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AdditionalDataTAbleRowDeleting != null)) {
                    this.AdditionalDataTAbleRowDeleting(this, new AdditionalDataTAbleRowChangeEvent(((AdditionalDataTAbleRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAdditionalDataTAbleRow(AdditionalDataTAbleRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DirectiveListReportDataSet ds = new DirectiveListReportDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AdditionalDataTAbleDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BaseDetailTableRow : System.Data.DataRow {
            
            private BaseDetailTableDataTable tableBaseDetailTable;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BaseDetailTableRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBaseDetailTable = ((BaseDetailTableDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OperatorID {
                get {
                    try {
                        return ((int)(this[this.tableBaseDetailTable.OperatorIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OperatorID\' in table \'BaseDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBaseDetailTable.OperatorIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BaseDetailID {
                get {
                    return ((int)(this[this.tableBaseDetailTable.BaseDetailIDColumn]));
                }
                set {
                    this[this.tableBaseDetailTable.BaseDetailIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SerialNumber {
                get {
                    try {
                        return ((string)(this[this.tableBaseDetailTable.SerialNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SerialNumber\' in table \'BaseDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBaseDetailTable.SerialNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ManufactureDate {
                get {
                    try {
                        return ((string)(this[this.tableBaseDetailTable.ManufactureDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ManufactureDate\' in table \'BaseDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBaseDetailTable.ManufactureDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Model {
                get {
                    try {
                        return ((string)(this[this.tableBaseDetailTable.ModelColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Model\' in table \'BaseDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBaseDetailTable.ModelColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LifelengthSinceNewHours {
                get {
                    try {
                        return ((string)(this[this.tableBaseDetailTable.LifelengthSinceNewHoursColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LifelengthSinceNewHours\' in table \'BaseDetailTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableBaseDetailTable.LifelengthSinceNewHoursColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LifelengthSinceNewCycles {
                get {
                    try {
                        return ((string)(this[this.tableBaseDetailTable.LifelengthSinceNewCyclesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LifelengthSinceNewCycles\' in table \'BaseDetailTable\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableBaseDetailTable.LifelengthSinceNewCyclesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AircraftRegistrationNumber {
                get {
                    try {
                        return ((string)(this[this.tableBaseDetailTable.AircraftRegistrationNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AircraftRegistrationNumber\' in table \'BaseDetailTable\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableBaseDetailTable.AircraftRegistrationNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AircraftLineNumber {
                get {
                    try {
                        return ((string)(this[this.tableBaseDetailTable.AircraftLineNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AircraftLineNumber\' in table \'BaseDetailTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBaseDetailTable.AircraftLineNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AircraftVariableNumber {
                get {
                    try {
                        return ((string)(this[this.tableBaseDetailTable.AircraftVariableNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AircraftVariableNumber\' in table \'BaseDetailTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableBaseDetailTable.AircraftVariableNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AircraftLineNumberCaption {
                get {
                    try {
                        return ((string)(this[this.tableBaseDetailTable.AircraftLineNumberCaptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AircraftLineNumberCaption\' in table \'BaseDetailTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableBaseDetailTable.AircraftLineNumberCaptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AircraftVariableNUmberCaption {
                get {
                    try {
                        return ((string)(this[this.tableBaseDetailTable.AircraftVariableNUmberCaptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AircraftVariableNUmberCaption\' in table \'BaseDetailTable\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableBaseDetailTable.AircraftVariableNUmberCaptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperatorTableRow OperatorTableRow {
                get {
                    return ((OperatorTableRow)(this.GetParentRow(this.Table.ParentRelations["OperatorTable_BaseDetailTable"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["OperatorTable_BaseDetailTable"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOperatorIDNull() {
                return this.IsNull(this.tableBaseDetailTable.OperatorIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOperatorIDNull() {
                this[this.tableBaseDetailTable.OperatorIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSerialNumberNull() {
                return this.IsNull(this.tableBaseDetailTable.SerialNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSerialNumberNull() {
                this[this.tableBaseDetailTable.SerialNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManufactureDateNull() {
                return this.IsNull(this.tableBaseDetailTable.ManufactureDateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManufactureDateNull() {
                this[this.tableBaseDetailTable.ManufactureDateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModelNull() {
                return this.IsNull(this.tableBaseDetailTable.ModelColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModelNull() {
                this[this.tableBaseDetailTable.ModelColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLifelengthSinceNewHoursNull() {
                return this.IsNull(this.tableBaseDetailTable.LifelengthSinceNewHoursColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLifelengthSinceNewHoursNull() {
                this[this.tableBaseDetailTable.LifelengthSinceNewHoursColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLifelengthSinceNewCyclesNull() {
                return this.IsNull(this.tableBaseDetailTable.LifelengthSinceNewCyclesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLifelengthSinceNewCyclesNull() {
                this[this.tableBaseDetailTable.LifelengthSinceNewCyclesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAircraftRegistrationNumberNull() {
                return this.IsNull(this.tableBaseDetailTable.AircraftRegistrationNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAircraftRegistrationNumberNull() {
                this[this.tableBaseDetailTable.AircraftRegistrationNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAircraftLineNumberNull() {
                return this.IsNull(this.tableBaseDetailTable.AircraftLineNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAircraftLineNumberNull() {
                this[this.tableBaseDetailTable.AircraftLineNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAircraftVariableNumberNull() {
                return this.IsNull(this.tableBaseDetailTable.AircraftVariableNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAircraftVariableNumberNull() {
                this[this.tableBaseDetailTable.AircraftVariableNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAircraftLineNumberCaptionNull() {
                return this.IsNull(this.tableBaseDetailTable.AircraftLineNumberCaptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAircraftLineNumberCaptionNull() {
                this[this.tableBaseDetailTable.AircraftLineNumberCaptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAircraftVariableNUmberCaptionNull() {
                return this.IsNull(this.tableBaseDetailTable.AircraftVariableNUmberCaptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAircraftVariableNUmberCaptionNull() {
                this[this.tableBaseDetailTable.AircraftVariableNUmberCaptionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ItemsTableRow : System.Data.DataRow {
            
            private ItemsTableDataTable tableItemsTable;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ItemsTableRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableItemsTable = ((ItemsTableDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ItemID {
                get {
                    return ((int)(this[this.tableItemsTable.ItemIDColumn]));
                }
                set {
                    this[this.tableItemsTable.ItemIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Applicability {
                get {
                    try {
                        return ((string)(this[this.tableItemsTable.ApplicabilityColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Applicability\' in table \'ItemsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItemsTable.ApplicabilityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remarks {
                get {
                    try {
                        return ((string)(this[this.tableItemsTable.RemarksColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Remarks\' in table \'ItemsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItemsTable.RemarksColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableItemsTable.DescriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Description\' in table \'ItemsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItemsTable.DescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Title {
                get {
                    try {
                        return ((string)(this[this.tableItemsTable.TitleColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Title\' in table \'ItemsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItemsTable.TitleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string References {
                get {
                    try {
                        return ((string)(this[this.tableItemsTable.ReferencesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'References\' in table \'ItemsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItemsTable.ReferencesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableItemsTable.StatusColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Status\' in table \'ItemsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItemsTable.StatusColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EffectivityDate {
                get {
                    try {
                        return ((string)(this[this.tableItemsTable.EffectivityDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EffectivityDate\' in table \'ItemsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItemsTable.EffectivityDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ThresholdSinceNew {
                get {
                    try {
                        return ((string)(this[this.tableItemsTable.ThresholdSinceNewColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ThresholdSinceNew\' in table \'ItemsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItemsTable.ThresholdSinceNewColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ThresholdSinceEffectivityDate {
                get {
                    try {
                        return ((string)(this[this.tableItemsTable.ThresholdSinceEffectivityDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ThresholdSinceEffectivityDate\' in table \'ItemsTable\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableItemsTable.ThresholdSinceEffectivityDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RepeatIntervals {
                get {
                    try {
                        return ((string)(this[this.tableItemsTable.RepeatIntervalsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RepeatIntervals\' in table \'ItemsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItemsTable.RepeatIntervalsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ComplianceLifelength {
                get {
                    try {
                        return ((string)(this[this.tableItemsTable.ComplianceLifelengthColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ComplianceLifelength\' in table \'ItemsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItemsTable.ComplianceLifelengthColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ComplianceDate {
                get {
                    try {
                        return ((string)(this[this.tableItemsTable.ComplianceDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ComplianceDate\' in table \'ItemsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItemsTable.ComplianceDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NextLifelength {
                get {
                    try {
                        return ((string)(this[this.tableItemsTable.NextLifelengthColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'NextLifelength\' in table \'ItemsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItemsTable.NextLifelengthColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NextDate {
                get {
                    try {
                        return ((string)(this[this.tableItemsTable.NextDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'NextDate\' in table \'ItemsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItemsTable.NextDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remains {
                get {
                    try {
                        return ((string)(this[this.tableItemsTable.RemainsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Remains\' in table \'ItemsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItemsTable.RemainsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Condition {
                get {
                    try {
                        return ((string)(this[this.tableItemsTable.ConditionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Condition\' in table \'ItemsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItemsTable.ConditionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApplicabilityNull() {
                return this.IsNull(this.tableItemsTable.ApplicabilityColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApplicabilityNull() {
                this[this.tableItemsTable.ApplicabilityColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemarksNull() {
                return this.IsNull(this.tableItemsTable.RemarksColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemarksNull() {
                this[this.tableItemsTable.RemarksColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableItemsTable.DescriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableItemsTable.DescriptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTitleNull() {
                return this.IsNull(this.tableItemsTable.TitleColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTitleNull() {
                this[this.tableItemsTable.TitleColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReferencesNull() {
                return this.IsNull(this.tableItemsTable.ReferencesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReferencesNull() {
                this[this.tableItemsTable.ReferencesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableItemsTable.StatusColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableItemsTable.StatusColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEffectivityDateNull() {
                return this.IsNull(this.tableItemsTable.EffectivityDateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEffectivityDateNull() {
                this[this.tableItemsTable.EffectivityDateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsThresholdSinceNewNull() {
                return this.IsNull(this.tableItemsTable.ThresholdSinceNewColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetThresholdSinceNewNull() {
                this[this.tableItemsTable.ThresholdSinceNewColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsThresholdSinceEffectivityDateNull() {
                return this.IsNull(this.tableItemsTable.ThresholdSinceEffectivityDateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetThresholdSinceEffectivityDateNull() {
                this[this.tableItemsTable.ThresholdSinceEffectivityDateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRepeatIntervalsNull() {
                return this.IsNull(this.tableItemsTable.RepeatIntervalsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRepeatIntervalsNull() {
                this[this.tableItemsTable.RepeatIntervalsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsComplianceLifelengthNull() {
                return this.IsNull(this.tableItemsTable.ComplianceLifelengthColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetComplianceLifelengthNull() {
                this[this.tableItemsTable.ComplianceLifelengthColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsComplianceDateNull() {
                return this.IsNull(this.tableItemsTable.ComplianceDateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetComplianceDateNull() {
                this[this.tableItemsTable.ComplianceDateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNextLifelengthNull() {
                return this.IsNull(this.tableItemsTable.NextLifelengthColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNextLifelengthNull() {
                this[this.tableItemsTable.NextLifelengthColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNextDateNull() {
                return this.IsNull(this.tableItemsTable.NextDateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNextDateNull() {
                this[this.tableItemsTable.NextDateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemainsNull() {
                return this.IsNull(this.tableItemsTable.RemainsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemainsNull() {
                this[this.tableItemsTable.RemainsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConditionNull() {
                return this.IsNull(this.tableItemsTable.ConditionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConditionNull() {
                this[this.tableItemsTable.ConditionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OperatorTableRow : System.Data.DataRow {
            
            private OperatorTableDataTable tableOperatorTable;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OperatorTableRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOperatorTable = ((OperatorTableDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OperatorID {
                get {
                    return ((int)(this[this.tableOperatorTable.OperatorIDColumn]));
                }
                set {
                    this[this.tableOperatorTable.OperatorIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableOperatorTable.NameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Name\' in table \'OperatorTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOperatorTable.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] Logotype {
                get {
                    try {
                        return ((byte[])(this[this.tableOperatorTable.LogotypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Logotype\' in table \'OperatorTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOperatorTable.LogotypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableOperatorTable.NameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableOperatorTable.NameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogotypeNull() {
                return this.IsNull(this.tableOperatorTable.LogotypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogotypeNull() {
                this[this.tableOperatorTable.LogotypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseDetailTableRow[] GetBaseDetailTableRows() {
                return ((BaseDetailTableRow[])(base.GetChildRows(this.Table.ChildRelations["OperatorTable_BaseDetailTable"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AdditionalDataTAbleRow : System.Data.DataRow {
            
            private AdditionalDataTAbleDataTable tableAdditionalDataTAble;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AdditionalDataTAbleRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAdditionalDataTAble = ((AdditionalDataTAbleDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableAdditionalDataTAble.IDColumn]));
                }
                set {
                    this[this.tableAdditionalDataTAble.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReportHeadertText {
                get {
                    try {
                        return ((string)(this[this.tableAdditionalDataTAble.ReportHeadertTextColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ReportHeadertText\' in table \'AdditionalDataTAble\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableAdditionalDataTAble.ReportHeadertTextColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DateAsOf {
                get {
                    try {
                        return ((string)(this[this.tableAdditionalDataTAble.DateAsOfColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateAsOf\' in table \'AdditionalDataTAble\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdditionalDataTAble.DateAsOfColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ModelText {
                get {
                    try {
                        return ((string)(this[this.tableAdditionalDataTAble.ModelTextColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ModelText\' in table \'AdditionalDataTAble\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdditionalDataTAble.ModelTextColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReportFooter {
                get {
                    try {
                        return ((string)(this[this.tableAdditionalDataTAble.ReportFooterColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ReportFooter\' in table \'AdditionalDataTAble\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdditionalDataTAble.ReportFooterColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReportFooterPrepared {
                get {
                    try {
                        return ((string)(this[this.tableAdditionalDataTAble.ReportFooterPreparedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ReportFooterPrepared\' in table \'AdditionalDataTAble\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableAdditionalDataTAble.ReportFooterPreparedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WebSite {
                get {
                    try {
                        return ((string)(this[this.tableAdditionalDataTAble.WebSiteColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'WebSite\' in table \'AdditionalDataTAble\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdditionalDataTAble.WebSiteColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReportHeadertTextNull() {
                return this.IsNull(this.tableAdditionalDataTAble.ReportHeadertTextColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReportHeadertTextNull() {
                this[this.tableAdditionalDataTAble.ReportHeadertTextColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateAsOfNull() {
                return this.IsNull(this.tableAdditionalDataTAble.DateAsOfColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateAsOfNull() {
                this[this.tableAdditionalDataTAble.DateAsOfColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModelTextNull() {
                return this.IsNull(this.tableAdditionalDataTAble.ModelTextColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModelTextNull() {
                this[this.tableAdditionalDataTAble.ModelTextColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReportFooterNull() {
                return this.IsNull(this.tableAdditionalDataTAble.ReportFooterColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReportFooterNull() {
                this[this.tableAdditionalDataTAble.ReportFooterColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReportFooterPreparedNull() {
                return this.IsNull(this.tableAdditionalDataTAble.ReportFooterPreparedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReportFooterPreparedNull() {
                this[this.tableAdditionalDataTAble.ReportFooterPreparedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWebSiteNull() {
                return this.IsNull(this.tableAdditionalDataTAble.WebSiteColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWebSiteNull() {
                this[this.tableAdditionalDataTAble.WebSiteColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BaseDetailTableRowChangeEvent : System.EventArgs {
            
            private BaseDetailTableRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseDetailTableRowChangeEvent(BaseDetailTableRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseDetailTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ItemsTableRowChangeEvent : System.EventArgs {
            
            private ItemsTableRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemsTableRowChangeEvent(ItemsTableRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemsTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OperatorTableRowChangeEvent : System.EventArgs {
            
            private OperatorTableRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperatorTableRowChangeEvent(OperatorTableRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperatorTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AdditionalDataTAbleRowChangeEvent : System.EventArgs {
            
            private AdditionalDataTAbleRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdditionalDataTAbleRowChangeEvent(AdditionalDataTAbleRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdditionalDataTAbleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591